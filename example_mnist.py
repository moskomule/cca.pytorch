# -*- coding: utf-8 -*-
"""hook_pytorch_mnist_works.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_QJ9zFirZPeP0rNZeynz9fh4jIBG6tDi
"""

#!git clone https://github.com/tushar-semwal/ts_archive.git
#!git clone https://github.com/google/svcca.git

#!pip install git+https://github.com/moskomule/homura
#!git clone https://github.com/moskomule/cca.pytorch.git

#mv cca.pytorch/cca/* .

from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from cca import CCAHook
import os
import matplotlib.pyplot as plt


class Arguments():
    def __init__(self):
        self.batch_size = 64
        self.test_batch_size = 1000
        self.image_width = 28
        self.kernal_size = 5
        self.conv_layers = 30
        self.dense_neurons = 100
        self.epochs = 10
        self.lr = 1e-2
        self.momentum = 0.5
        self.no_cuda = False
        self.seed = 1
        self.log_interval = 50
        self.save_model = True
        self.n_classes = 10

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 20, 5, 1)
        self.conv2 = nn.Conv2d(20, 50, 5, 1)
        self.fc1 = nn.Linear(4*4*50, 500)
        self.fc2 = nn.Linear(500, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2, 2)
        x = x.view(-1, 4*4*50)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)
    
def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

def test(args, model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item() # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True) # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))


def save_checkpoint(state, checkpoint):
   """Saves model and training parameters at checkpoint + 'last.pth.tar'. If is_best==True, also saves
   checkpoint + 'best.pth.tar'
   Args:
       state: (dict) contains model's state_dict, may contain other keys such as epoch, optimizer state_dict
       is_best: (bool) True if it is the best model seen till now
       checkpoint: (string) folder where parameters are to be saved
   """
   filepath = os.path.join(checkpoint, str(state['epoch'])+'.pth.tar')
   if not os.path.exists(checkpoint):
       print("Checkpoint Directory does not exist! Making directory {}".format(checkpoint))
       os.mkdir(checkpoint)
   torch.save(state, filepath)
  
def load_checkpoint(checkpoint, model, optimizer=None):
    """Loads model parameters (state_dict) from file_path. If optimizer is provided, loads state_dict of
    optimizer assuming it is present in checkpoint.
    Args:
        checkpoint: (string) filename which needs to be loaded
        model: (torch.nn.Module) model for which the parameters are loaded
        optimizer: (torch.optim) optional: resume optimizer from checkpoint
    """
    if not os.path.exists(checkpoint):
        raise("File doesn't exist {}".format(checkpoint))
    checkpoint = torch.load(checkpoint)
    model.load_state_dict(checkpoint['state_dict'])

    print('Model loaded @ Epoch: {}'.format(checkpoint['epoch']))

def distance():
    model.eval()
    model2.eval()
    with torch.no_grad():
        model(input)
        model2(input)
    return [h1.distance(h2) for h1, h2 in zip(hooks1, hooks2)]


if __name__ == '__main__':

    args = Arguments()
    use_cuda = torch.cuda.is_available()

    torch.manual_seed(args.seed)

    device = torch.device("cuda" if use_cuda else "cpu")

    kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
    train_loader = torch.utils.data.DataLoader(
        datasets.MNIST('../data', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ])),
        batch_size=args.batch_size, shuffle=True, **kwargs)
    test_loader = torch.utils.data.DataLoader(
        datasets.MNIST('../data', train=False, transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ])),
        batch_size=args.test_batch_size, shuffle=True, **kwargs)


    model = Net().to(device)
    optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum)

    for epoch in range(1, args.epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch)
        test(args, model, device, test_loader)
        save_checkpoint({'epoch': epoch,'state_dict': model.state_dict()},checkpoint='checkpoints/')


    model2 = Net().to(device)

    layers = ["conv1", "conv2", "fc1", "fc2"]
    hooks1 = [CCAHook(model, name, svd_device="cpu") for name in layers]
    hooks2 = [CCAHook(model2, name, svd_device="cpu") for name in layers]
    input = hooks1[0].data(test_loader.dataset, batch_size=5000).to(device)
    history = []


    # 0 and 99
    history.append(distance())

    for ep in range (1,11):
      load_checkpoint('checkpoints/' + str(ep) + '.pth.tar',model2)
      history.append(distance())

    x = [1,2,3,4,5,6,7,8,9,10,11]
    for k, v in zip(layers, torch.Tensor(history).t().tolist()):
        plt.plot(x, v, label=k)
        print("layer: " + k)
        print("Distances: {}".format(v))
    plt.legend()
    plt.savefig("save.png")
